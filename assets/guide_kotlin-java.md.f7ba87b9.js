import{_ as s,o as n,c as a,V as l}from"./chunks/framework.7726510e.js";const o="/iroha-2-docs/assets/iroha_java_hash.c677e97a.png",p="/iroha-2-docs/assets/iroha_java_commits.a73a8bf6.png",u=JSON.parse('{"title":"Kotlin/Java Guide","description":"","frontmatter":{},"headers":[],"relativePath":"guide/kotlin-java.md","lastUpdated":1684147028000}'),e={name:"guide/kotlin-java.md"},t=l(`<h1 id="kotlin-java-guide" tabindex="-1">Kotlin/Java Guide <a class="header-anchor" href="#kotlin-java-guide" aria-label="Permalink to &quot;Kotlin/Java Guide&quot;">​</a></h1><h2 id="_1-iroha-2-client-setup" tabindex="-1">1. Iroha 2 Client Setup <a class="header-anchor" href="#_1-iroha-2-client-setup" aria-label="Permalink to &quot;1. Iroha 2 Client Setup&quot;">​</a></h2><p>In this part we shall cover the main things to look out for if you want to use Iroha 2 in your Kotlin application. Instead of providing the complete basics, we shall assume knowledge of the most widely used concepts, explain the unusual, and provide some instructions for creating your own Iroha 2-compatible client.</p><p>We assume that you know how to create a new package and have basic understanding of the fundamental Kotlin code. Specifically, we shall assume that you know how to build and deploy your program on the target platforms. The Iroha 2 JVM-compatible SDKs are as much a work-in-progress as the rest of this guide, and significantly more so than the Rust library.</p><p>Without further ado, here&#39;s a part of an example <code>build.gradle.kts</code> file, specifically, the <code>repositories</code> and <code>dependencies</code> sections:</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#ADBAC7;">repositories {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Use Maven Central for resolving dependencies</span></span>
<span class="line"><span style="color:#ADBAC7;">    mavenCentral()</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Use Jitpack</span></span>
<span class="line"><span style="color:#ADBAC7;">    maven { url </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> uri(</span><span style="color:#96D0FF;">&quot;https://jitpack.io&quot;</span><span style="color:#ADBAC7;">) }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">dependencies {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Align versions of all Kotlin components</span></span>
<span class="line"><span style="color:#ADBAC7;">    implementation(platform(</span><span style="color:#96D0FF;">&quot;org.jetbrains.kotlin:kotlin-bom&quot;</span><span style="color:#ADBAC7;">))</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Use the Kotlin JDK 8 standard library</span></span>
<span class="line"><span style="color:#ADBAC7;">    implementation(</span><span style="color:#96D0FF;">&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Load the dependency used by the application</span></span>
<span class="line"><span style="color:#ADBAC7;">    implementation(</span><span style="color:#96D0FF;">&quot;com.google.guava:guava:31.0.1-jre&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Use the Kotlin test library</span></span>
<span class="line"><span style="color:#ADBAC7;">    testImplementation(</span><span style="color:#96D0FF;">&quot;org.jetbrains.kotlin:kotlin-test&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Use the Kotlin JUnit integration</span></span>
<span class="line"><span style="color:#ADBAC7;">    testImplementation(</span><span style="color:#96D0FF;">&quot;org.jetbrains.kotlin:kotlin-test-junit&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Load Iroha-related dependencies</span></span>
<span class="line"><span style="color:#ADBAC7;">    implementation(</span><span style="color:#96D0FF;">&quot;com.github.hyperledger.iroha-java:client:SNAPSHOT&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    implementation(</span><span style="color:#96D0FF;">&quot;com.github.hyperledger.iroha-java:block:SNAPSHOT&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    implementation(</span><span style="color:#96D0FF;">&quot;com.github.hyperledger.iroha-java:model:SNAPSHOT&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    implementation(</span><span style="color:#96D0FF;">&quot;com.github.hyperledger.iroha-java:test-tools:SNAPSHOT&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><p>You <strong>should</strong> replace the SNAPSHOT in the above configuration with the latest <code>iroha-java</code> snapshot.</p><p>Snapshot versions match the Git commits. To get the latest snapshot, simply visit the <a href="https://github.com/hyperledger/iroha-java/tree/iroha2-dev" target="_blank" rel="noreferrer"><code>iroha-java</code></a> repository on the <code>iroha-2-dev</code> branch and copy the short hash of the last commit on the main page.</p><p><img src="`+o+'" alt=""></p><p>You can also check the <a href="https://github.com/hyperledger/iroha-java/commits/iroha2-dev" target="_blank" rel="noreferrer">commit history</a> and copy the commit hash of a previous commit.</p><p><img src="'+p+`" alt=""></p><p>This will give you the latest development release of Iroha 2.</p><h2 id="_2-configuring-iroha-2" tabindex="-1">2. Configuring Iroha 2 <a class="header-anchor" href="#_2-configuring-iroha-2" aria-label="Permalink to &quot;2. Configuring Iroha 2&quot;">​</a></h2><p>At present, the Kotlin SDK doesn&#39;t have any classes to interact with the configuration. Instead, you are provided with a ready-made <code>Iroha2Client</code> that reads the configuration from the environment variables and/or the resident <code>config.json</code> in the working directory.</p><p>If you are so inclined, you can have a look at the <code>testcontainers</code> module, and see how the <code>Iroha2Config</code> is implemented.</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">package</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">jp.co.soramitsu.iroha2.testengine</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.DEFAULT_API_PORT</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.DEFAULT_P2P_PORT</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.DEFAULT_TELEMETRY_PORT</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.Genesis</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generateKeyPair</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.peer.PeerId</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.toIrohaPublicKey</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.slf4j.LoggerFactory.getLogger</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.testcontainers.containers.Network</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.testcontainers.containers.Network.newNetwork</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.testcontainers.containers.output.OutputFrame</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.testcontainers.containers.output.Slf4jLogConsumer</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.testcontainers.images.ImagePullPolicy</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.testcontainers.images.PullPolicy</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.security.KeyPair</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.time.Duration</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.util.function.Consumer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">/**</span></span>
<span class="line"><span style="color:#768390;"> * Iroha configuration</span></span>
<span class="line"><span style="color:#768390;"> */</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">IrohaConfig</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> networkToJoin</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Network</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> newNetwork(),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> logConsumer</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Consumer</span><span style="color:#F47067;">&lt;</span><span style="color:#F69D50;">OutputFrame</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Slf4jLogConsumer</span><span style="color:#ADBAC7;">(getLogger(IrohaContainer::</span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">.java)),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> genesis</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Genesis</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Genesis</span><span style="color:#ADBAC7;">.getEmpty(),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> imageTag</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">String</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">IrohaContainer</span><span style="color:#ADBAC7;">.</span><span style="color:#F69D50;">DEFAULT_IMAGE_TAG</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> imageName</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">String</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">IrohaContainer</span><span style="color:#ADBAC7;">.</span><span style="color:#F69D50;">DEFAULT_IMAGE_NAME</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> pullPolicy</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ImagePullPolicy</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">PullPolicy</span><span style="color:#ADBAC7;">.ageBased(</span><span style="color:#F69D50;">Duration</span><span style="color:#ADBAC7;">.ofMinutes(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">)),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> alias</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">String</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">IrohaContainer</span><span style="color:#ADBAC7;">.</span><span style="color:#F69D50;">NETWORK_ALIAS</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">DEFAULT_P2P_PORT</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> keyPair</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">KeyPair</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> generateKeyPair(),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> trustedPeers</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">List</span><span style="color:#F47067;">&lt;</span><span style="color:#F69D50;">PeerId</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">listOf</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F69D50;">PeerId</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#96D0FF;">&quot;$alias:$DEFAULT_P2P_PORT&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">            keyPair.</span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;">.toIrohaPublicKey()</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"><span style="color:#ADBAC7;">    ),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> ports</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">List</span><span style="color:#F47067;">&lt;</span><span style="color:#6CB6FF;">Int</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">listOf</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">DEFAULT_P2P_PORT</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">DEFAULT_API_PORT</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">DEFAULT_TELEMETRY_PORT</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> shouldCloseNetwork</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> waitStrategy</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> submitGenesis</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Boolean</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">companion</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">object</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">P2P_PORT_IDX</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">API_PORT_IDX</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">const</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">TELEMETRY_PORT_IDX</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><h2 id="_3-registering-a-domain" tabindex="-1">3. Registering a Domain <a class="header-anchor" href="#_3-registering-a-domain" aria-label="Permalink to &quot;3. Registering a Domain&quot;">​</a></h2><p>Registering a domain is one of the easier operations. The usual boilerplate code, that often only serves to instantiate a client from an on-disk configuration file, is unnecessary. Instead, you have to deal with a few imports:</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.junit.jupiter.api.extension.ExtendWith</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.junit.jupiter.api.Test</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.junit.jupiter.api.Assertions</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.engine.IrohaRunnerExtension</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.Iroha2Client</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.engine.WithIroha</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> kotlinx.coroutines.runBlocking</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> kotlin.test.assertEquals</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.util.concurrent.TimeUnit</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.account.Id </span><span style="color:#F47067;">as</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AccountId</span></span></code></pre></div><p>We shall write this example in the form of a test class, hence the presence of test-related packages. Note the presence of <code>coroutines.runBlocking</code>. Iroha makes extensive use of asynchronous programming (in Rust terminology), hence blocking is not necessarily the only mode of interaction with the Iroha 2 code.</p><p>We have started by creating a mutable lazy-initialised client. This client is passed an instance of a domain registration box, which we get as a result of evaluating <code>registerDomain(domainName)</code>. Then the client is sent a transaction which consists of that one instruction. And that&#39;s it.</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">@Test</span></span>
<span class="line"><span style="color:#F47067;">@WithIroha</span><span style="color:#ADBAC7;">([</span><span style="color:#F69D50;">DefaultGenesis</span><span style="color:#ADBAC7;">::</span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">\`register domain instruction committed\`</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Unit</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> runBlocking {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> domainId </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;new_domain_name&quot;</span><span style="color:#ADBAC7;">.asDomainId()</span></span>
<span class="line"><span style="color:#ADBAC7;">    client.sendTransaction {</span></span>
<span class="line"><span style="color:#ADBAC7;">        account(</span><span style="color:#F69D50;">ALICE_ACCOUNT_ID</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        registerDomain(domainId)</span></span>
<span class="line"><span style="color:#ADBAC7;">        buildSigned(</span><span style="color:#F69D50;">ALICE_KEYPAIR</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }.</span><span style="color:#6CB6FF;">also</span><span style="color:#ADBAC7;"> { d </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        withTimeout(txTimeout) { d.await() }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">QueryBuilder</span><span style="color:#ADBAC7;">.findDomainById(domainId)</span></span>
<span class="line"><span style="color:#ADBAC7;">        .account(</span><span style="color:#F69D50;">ALICE_ACCOUNT_ID</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        .buildSigned(</span><span style="color:#F69D50;">ALICE_KEYPAIR</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#6CB6FF;">let</span><span style="color:#ADBAC7;"> { query </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> client.sendQuery(query) }</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#6CB6FF;">also</span><span style="color:#ADBAC7;"> { result </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> assertEquals(result.id, domainId) }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><p>Well, almost. You may have noticed that we had to do this on behalf of <code>aliceAccountId</code>. This is because any transaction on the Iroha 2 blockchain has to be done by an account. This is a special account that must already exist on the blockchain. You can ensure that point by reading through <code>genesis.json</code> and seeing that <strong><em>alice</em></strong> indeed has an account, with a public key. Furthermore, the account&#39;s public key must be included in the configuration. If either of these two is missing, you will not be able to register an account, and will be greeted by an exception of an appropriate type.</p><h2 id="_4-registering-an-account" tabindex="-1">4. Registering an Account <a class="header-anchor" href="#_4-registering-an-account" aria-label="Permalink to &quot;4. Registering an Account&quot;">​</a></h2><p>Registering an account is more involved than the aforementioned functions. Previously, we only had to worry about submitting a single instruction, with a single string-based registration box (in Rust terminology, the heap-allocated reference types are all called boxes).</p><p>When registering an account, there are a few more variables. The account can only be registered to an existing domain. Also, an account typically has to have a key pair. So if e.g. <em>alice@wonderland</em> was registering an account for <em>white_rabbit@looking_glass</em>, she should provide his public key.</p><p>It is tempting to generate both the private and public keys at this time, but it isn&#39;t the brightest idea. Remember that <em>the white_rabbit</em> trusts <em>you, alice@wonderland,</em> to create an account for them in the domain <em>looking_glass</em>, <strong>but doesn&#39;t want you to have access to that account after creation</strong>.</p><p>If you gave <em>white_rabbit</em> a key that you generated yourself, how would they know if you don&#39;t have a copy of their private key? Instead, the best way is to <strong>ask</strong> <em>white_rabbit</em> to generate a new key-pair, and give you the public half of it.</p><p>Similarly to the previous example, we provide the instructions in the form of a test:</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">@Test</span></span>
<span class="line"><span style="color:#F47067;">@WithIroha</span><span style="color:#ADBAC7;">([</span><span style="color:#F69D50;">DefaultGenesis</span><span style="color:#ADBAC7;">::</span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">\`register account instruction committed\`</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Unit</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> runBlocking {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> newAccountId </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AccountId</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;foo&quot;</span><span style="color:#ADBAC7;">.asName(), </span><span style="color:#F69D50;">DEFAULT_DOMAIN_ID</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    client.sendTransaction {</span></span>
<span class="line"><span style="color:#ADBAC7;">        account(</span><span style="color:#F69D50;">ALICE_ACCOUNT_ID</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        registerAccount(newAccountId, </span><span style="color:#6CB6FF;">listOf</span><span style="color:#ADBAC7;">())</span></span>
<span class="line"><span style="color:#ADBAC7;">        buildSigned(</span><span style="color:#F69D50;">ALICE_KEYPAIR</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }.</span><span style="color:#6CB6FF;">also</span><span style="color:#ADBAC7;"> { d </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        withTimeout(txTimeout) { d.await() }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">QueryBuilder</span><span style="color:#ADBAC7;">.findAccountById(newAccountId)</span></span>
<span class="line"><span style="color:#ADBAC7;">        .account(</span><span style="color:#F69D50;">ALICE_ACCOUNT_ID</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        .buildSigned(</span><span style="color:#F69D50;">ALICE_KEYPAIR</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#6CB6FF;">let</span><span style="color:#ADBAC7;"> { query </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> client.sendQuery(query) }</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#6CB6FF;">also</span><span style="color:#ADBAC7;"> { account </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> assertEquals(account.id, newAccountId) }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><p>As you can see, for <em>illustrative purposes</em>, we have generated a new key-pair. We converted that key-pair into an Iroha-compatible format using <code>toIrohaPublicKey</code>, and added the public key to the instruction to register an account.</p><p>Again, it&#39;s important to note that we are using <em>alice@wonderland</em> as a proxy to interact with the blockchain, hence her credentials also appear in the transaction.</p><h2 id="_5-registering-and-minting-assets" tabindex="-1">5. Registering and minting assets <a class="header-anchor" href="#_5-registering-and-minting-assets" aria-label="Permalink to &quot;5. Registering and minting assets&quot;">​</a></h2><p>Iroha has been built with few <a href="./blockchain/assets.html">underlying assumptions</a> about what the assets need to be in terms of their value type and characteristics (fungible or non-fungible, mintable or non-mintable).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The non-mintable assets are a relatively recent addition to Iroha 2, thus registering and minting such assets is not presently possible through the Kotlin SDK.</p></div><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">@Test</span></span>
<span class="line"><span style="color:#F47067;">@WithIroha</span><span style="color:#ADBAC7;">([</span><span style="color:#F69D50;">DefaultGenesis</span><span style="color:#ADBAC7;">::</span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">\`register asset instruction committed\`</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Unit</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> runBlocking {</span></span>
<span class="line"><span style="color:#ADBAC7;">    client.sendTransaction {</span></span>
<span class="line"><span style="color:#ADBAC7;">        account(</span><span style="color:#F69D50;">ALICE_ACCOUNT_ID</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        registerAssetDefinition(</span><span style="color:#F69D50;">DEFAULT_ASSET_DEFINITION_ID</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">AssetValueType</span><span style="color:#ADBAC7;">.</span><span style="color:#F69D50;">Quantity</span><span style="color:#ADBAC7;">())</span></span>
<span class="line"><span style="color:#ADBAC7;">        buildSigned(</span><span style="color:#F69D50;">ALICE_KEYPAIR</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }.</span><span style="color:#6CB6FF;">also</span><span style="color:#ADBAC7;"> { d </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        withTimeout(txTimeout) { d.await() }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> assetDefinitions </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">QueryBuilder</span><span style="color:#ADBAC7;">.findAllAssetsDefinitions()</span></span>
<span class="line"><span style="color:#ADBAC7;">        .account(</span><span style="color:#F69D50;">ALICE_ACCOUNT_ID</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        .buildSigned(</span><span style="color:#F69D50;">ALICE_KEYPAIR</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#6CB6FF;">let</span><span style="color:#ADBAC7;"> { q </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> client.sendQuery(q) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    assertFalse { assetDefinitions.isEmpty() }</span></span>
<span class="line"><span style="color:#ADBAC7;">    assetDefinitions.find { it.id </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">DEFAULT_ASSET_DEFINITION_ID</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">?:</span><span style="color:#ADBAC7;"> fail(</span><span style="color:#96D0FF;">&quot;Expected query response contains assetDefinition $DEFAULT_ASSET_DEFINITION_ID, but it is not. Response was $assetDefinitions&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">@Test</span></span>
<span class="line"><span style="color:#F47067;">@WithIroha</span><span style="color:#ADBAC7;">([</span><span style="color:#F69D50;">DefaultGenesis</span><span style="color:#ADBAC7;">::</span><span style="color:#6CB6FF;">class</span><span style="color:#ADBAC7;">])</span></span>
<span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">\`mint asset instruction committed\`</span><span style="color:#ADBAC7;">()</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Unit</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> runBlocking {</span></span>
<span class="line"><span style="color:#ADBAC7;">    client.sendTransaction {</span></span>
<span class="line"><span style="color:#ADBAC7;">        account(</span><span style="color:#F69D50;">ALICE_ACCOUNT_ID</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        registerAssetDefinition(</span><span style="color:#F69D50;">DEFAULT_ASSET_DEFINITION_ID</span><span style="color:#ADBAC7;">, </span><span style="color:#F69D50;">AssetValueType</span><span style="color:#ADBAC7;">.</span><span style="color:#F69D50;">Quantity</span><span style="color:#ADBAC7;">())</span></span>
<span class="line"><span style="color:#ADBAC7;">        mintAsset(</span><span style="color:#F69D50;">DEFAULT_ASSET_ID</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        buildSigned(</span><span style="color:#F69D50;">ALICE_KEYPAIR</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }.</span><span style="color:#6CB6FF;">also</span><span style="color:#ADBAC7;"> { d </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        withTimeout(txTimeout) { d.await() }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F69D50;">QueryBuilder</span><span style="color:#ADBAC7;">.findAccountById(</span><span style="color:#F69D50;">ALICE_ACCOUNT_ID</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        .account(</span><span style="color:#F69D50;">ALICE_ACCOUNT_ID</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        .buildSigned(</span><span style="color:#F69D50;">ALICE_KEYPAIR</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#6CB6FF;">let</span><span style="color:#ADBAC7;"> { query </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> client.sendQuery(query) }</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#6CB6FF;">also</span><span style="color:#ADBAC7;"> { result </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">            assertEquals(</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">, result.assets[</span><span style="color:#F69D50;">DEFAULT_ASSET_ID</span><span style="color:#ADBAC7;">]?.value?.cast</span><span style="color:#F47067;">&lt;</span><span style="color:#F69D50;">AssetValue</span><span style="color:#ADBAC7;">.</span><span style="color:#F69D50;">Quantity</span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;">()?.u32)</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><p>Note that our original intention was to register an asset named <em>time#looking_glass</em> that was non-mintable. Due to a technical limitation we cannot prevent that asset from being minted. However, we can ensure that the late bunny is always late: <em>alice@wonderland</em> can mint time but only to her account initially.</p><p>If she tried to mint an asset that was registered using a different client, which was non-mintable, this attempt would have been rejected, <em>and Alice alongside her long-eared, perpetually stressed friend would have no way of making more time</em>.</p><h2 id="_6-visualizing-outputs" tabindex="-1">6. Visualizing outputs <a class="header-anchor" href="#_6-visualizing-outputs" aria-label="Permalink to &quot;6. Visualizing outputs&quot;">​</a></h2><p>Finally, we should talk about visualising data. The Rust API is currently the most complete in terms of available queries and instructions. After all, this is the language in which Iroha 2 was built. Kotlin, by contrast, supports only some features.</p><p>There are two possible event filters: <code>PipelineEventFilter</code> and <code>DataEventFilter</code>, we shall focus on the former. This filter sieves events pertaining to the process of submitting a transaction, executing a transaction and committing it to a block.</p><div class="language-kotlin"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.events.EventFilter.Pipeline</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.events.pipeline.EventFilter</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.events.pipeline.EntityType.Transaction</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.crypto.hash.Hash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> hash</span><span style="color:#F47067;">:</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">ByteArray</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> eventFilter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">Pipeline</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">EventFilter</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">Transaction</span><span style="color:#ADBAC7;">(), </span><span style="color:#F69D50;">Hash</span><span style="color:#ADBAC7;">(hash)))</span></span></code></pre></div><p>What this short code snippet does is the following: It creates an event pipeline filter that checks if a transaction with the specified hash was submitted/rejected. This can then be used to see if the transaction we submitted was processed correctly and provide feedback to the end-user.</p><h2 id="_7-samples-in-pure-java" tabindex="-1">7. Samples in pure Java <a class="header-anchor" href="#_7-samples-in-pure-java" aria-label="Permalink to &quot;7. Samples in pure Java&quot;">​</a></h2><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed"><code><span class="line"><span style="color:#F47067;">package</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.client.Iroha2AsyncClient;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.Value;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.account.Account;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.account.AccountId;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.asset.AssetId;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.asset.AssetValue;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.asset.AssetValueType;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.domain.Domain;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.domain.DomainId;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.metadata.Metadata;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.name.Name;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.generated.datamodel.transaction.VersionedSignedTransaction;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.query.QueryAndExtractor;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.query.QueryBuilder;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.testengine.DefaultGenesis;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.testengine.IrohaTest;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.testengine.WithIroha;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.transaction.TransactionBuilder;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.junit.jupiter.api.Assertions;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.util.ArrayList;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.util.HashMap;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.util.concurrent.CompletableFuture;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.util.concurrent.ExecutionException;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.util.concurrent.TimeUnit;</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> java.util.concurrent.TimeoutException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">static</span><span style="color:#ADBAC7;"> jp.co.soramitsu.iroha2.testengine.TestConstsKt.</span><span style="color:#6CB6FF;">*</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">JavaTest</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">extends</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">IrohaTest</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">Iroha2AsyncClient</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Test</span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">WithIroha</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">sources</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">instructionFailed</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> VersionedSignedTransaction</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">transaction</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">builder</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">fail</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;FAIL MESSAGE&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> CompletableFuture</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">byte</span><span style="color:#F69D50;">[]&gt; </span><span style="color:#ADBAC7;">future</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> client.</span><span style="color:#DCBDFB;">sendTransactionAsync</span><span style="color:#ADBAC7;">(transaction);</span></span>
<span class="line"><span style="color:#ADBAC7;">        Assertions.</span><span style="color:#DCBDFB;">assertThrows</span><span style="color:#ADBAC7;">(ExecutionException.class,</span></span>
<span class="line"><span style="color:#ADBAC7;">            () </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> future.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">getTxTimeout</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">getSeconds</span><span style="color:#ADBAC7;">(), TimeUnit.SECONDS)</span></span>
<span class="line"><span style="color:#ADBAC7;">        );</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Test</span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">WithIroha</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">sources</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">registerDomainInstructionCommitted</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> ExecutionException, InterruptedException, TimeoutException {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> DomainId</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">domainId</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">DomainId</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Name</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;new_domain_name&quot;</span><span style="color:#ADBAC7;">));</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> VersionedSignedTransaction</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">transaction</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">builder</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">registerDomain</span><span style="color:#ADBAC7;">(domainId)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        client.</span><span style="color:#DCBDFB;">sendTransactionAsync</span><span style="color:#ADBAC7;">(transaction).</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">getTxTimeout</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">getSeconds</span><span style="color:#ADBAC7;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> QueryAndExtractor</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Domain</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">query</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> QueryBuilder</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">findDomainById</span><span style="color:#ADBAC7;">(domainId)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> CompletableFuture</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Domain</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">future</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> client.</span><span style="color:#DCBDFB;">sendQueryAsync</span><span style="color:#ADBAC7;">(query);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> Domain</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">domain</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> future.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">getTxTimeout</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">getSeconds</span><span style="color:#ADBAC7;">(), TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#ADBAC7;">        Assertions.</span><span style="color:#DCBDFB;">assertEquals</span><span style="color:#ADBAC7;">(domain.</span><span style="color:#DCBDFB;">getId</span><span style="color:#ADBAC7;">(), domainId);</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Test</span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">WithIroha</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">sources</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">registerAccountInstructionCommitted</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> AccountId</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">accountId</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">AccountId</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Name</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;new_account&quot;</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">            DEFAULT_DOMAIN_ID</span></span>
<span class="line"><span style="color:#ADBAC7;">        );</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> VersionedSignedTransaction</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">transaction</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">builder</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">registerAccount</span><span style="color:#ADBAC7;">(accountId, </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> ArrayList&lt;&gt;())</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        client.</span><span style="color:#DCBDFB;">sendTransactionAsync</span><span style="color:#ADBAC7;">(transaction).</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">getTxTimeout</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">getSeconds</span><span style="color:#ADBAC7;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> QueryAndExtractor</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Account</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">query</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> QueryBuilder</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">findAccountById</span><span style="color:#ADBAC7;">(accountId)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> CompletableFuture</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Account</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">future</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> client.</span><span style="color:#DCBDFB;">sendQueryAsync</span><span style="color:#ADBAC7;">(query);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> Account</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">account</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> future.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">getTxTimeout</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">getSeconds</span><span style="color:#ADBAC7;">(), TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#ADBAC7;">        Assertions.</span><span style="color:#DCBDFB;">assertEquals</span><span style="color:#ADBAC7;">(account.</span><span style="color:#DCBDFB;">getId</span><span style="color:#ADBAC7;">(), accountId);</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Test</span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">WithIroha</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">sources</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">mintAssetInstructionCommitted</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> VersionedSignedTransaction</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">registerAssetTx</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">builder</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">registerAssetDefinition</span><span style="color:#ADBAC7;">(DEFAULT_ASSET_DEFINITION_ID, </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> AssetValueType.</span><span style="color:#DCBDFB;">Quantity</span><span style="color:#ADBAC7;">())</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        client.</span><span style="color:#DCBDFB;">sendTransactionAsync</span><span style="color:#ADBAC7;">(registerAssetTx).</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">getTxTimeout</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">getSeconds</span><span style="color:#ADBAC7;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> VersionedSignedTransaction</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">mintAssetTx</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">builder</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">mintAsset</span><span style="color:#ADBAC7;">(DEFAULT_ASSET_ID, </span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        client.</span><span style="color:#DCBDFB;">sendTransactionAsync</span><span style="color:#ADBAC7;">(mintAssetTx).</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">getTxTimeout</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">getSeconds</span><span style="color:#ADBAC7;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> QueryAndExtractor</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Account</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">query</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> QueryBuilder</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">findAccountById</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> CompletableFuture</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Account</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">future</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> client.</span><span style="color:#DCBDFB;">sendQueryAsync</span><span style="color:#ADBAC7;">(query);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> Account</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">account</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> future.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">getTxTimeout</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">getSeconds</span><span style="color:#ADBAC7;">(), TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> AssetValue</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> account.</span><span style="color:#DCBDFB;">getAssets</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(DEFAULT_ASSET_ID).</span><span style="color:#DCBDFB;">getValue</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">        Assertions.</span><span style="color:#DCBDFB;">assertEquals</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">5</span><span style="color:#ADBAC7;">, ((AssetValue.Quantity) value).</span><span style="color:#DCBDFB;">getU32</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Test</span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">WithIroha</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">sources</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">updateKeyValueInstructionCommitted</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> Name</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">assetMetadataKey</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Name</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;asset_metadata_key&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> Value</span><span style="color:#F69D50;">.</span><span style="color:#ADBAC7;">String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">assetMetadataValue</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> Value.</span><span style="color:#DCBDFB;">String</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;some string value&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> Value</span><span style="color:#F69D50;">.</span><span style="color:#ADBAC7;">String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">assetMetadataValue2</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> Value.</span><span style="color:#DCBDFB;">String</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;some string value 2&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> Metadata</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">metadata</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Metadata</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> HashMap&lt;</span><span style="color:#F47067;">Name</span><span style="color:#ADBAC7;">, </span><span style="color:#F47067;">Value</span><span style="color:#ADBAC7;">&gt;() {{</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">put</span><span style="color:#ADBAC7;">(assetMetadataKey, assetMetadataValue);</span></span>
<span class="line"><span style="color:#ADBAC7;">        }});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> VersionedSignedTransaction</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">registerAssetTx</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">builder</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">registerAssetDefinition</span><span style="color:#ADBAC7;">(DEFAULT_ASSET_DEFINITION_ID, </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> AssetValueType.</span><span style="color:#DCBDFB;">Store</span><span style="color:#ADBAC7;">(), metadata)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        client.</span><span style="color:#DCBDFB;">sendTransactionAsync</span><span style="color:#ADBAC7;">(registerAssetTx).</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">getTxTimeout</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">getSeconds</span><span style="color:#ADBAC7;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> AssetId</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">assetId</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">AssetId</span><span style="color:#ADBAC7;">(DEFAULT_ASSET_DEFINITION_ID, ALICE_ACCOUNT_ID);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> VersionedSignedTransaction</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">keyValueTx</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">builder</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">setKeyValue</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">                assetId,</span></span>
<span class="line"><span style="color:#ADBAC7;">                assetMetadataKey,</span></span>
<span class="line"><span style="color:#ADBAC7;">                assetMetadataValue2</span></span>
<span class="line"><span style="color:#ADBAC7;">            ).</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        client.</span><span style="color:#DCBDFB;">sendTransactionAsync</span><span style="color:#ADBAC7;">(keyValueTx).</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">, TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> QueryAndExtractor</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Value</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">assetDefinitionValueQuery</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> QueryBuilder</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">findAssetKeyValueByIdAndKey</span><span style="color:#ADBAC7;">(assetId, assetMetadataKey)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> CompletableFuture</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Value</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">future</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> client.</span><span style="color:#DCBDFB;">sendQueryAsync</span><span style="color:#ADBAC7;">(assetDefinitionValueQuery);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> Value</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> future.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#ADBAC7;">        Assertions.</span><span style="color:#DCBDFB;">assertEquals</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">            ((Value.String) value).</span><span style="color:#DCBDFB;">getString</span><span style="color:#ADBAC7;">(),</span></span>
<span class="line"><span style="color:#ADBAC7;">            assetMetadataValue2.</span><span style="color:#DCBDFB;">getString</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        );</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">Test</span></span>
<span class="line"><span style="color:#ADBAC7;">    @</span><span style="color:#F47067;">WithIroha</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">sources</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">void</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setKeyValueInstructionCommitted</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> Value</span><span style="color:#F69D50;">.</span><span style="color:#ADBAC7;">String</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">assetValue</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> Value.</span><span style="color:#DCBDFB;">String</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;some string value&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> Name</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">assetKey</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Name</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;asset_metadata_key&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> VersionedSignedTransaction</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">registerAssetTx</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">builder</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">registerAssetDefinition</span><span style="color:#ADBAC7;">(DEFAULT_ASSET_DEFINITION_ID, </span><span style="color:#F47067;">new</span><span style="color:#ADBAC7;"> AssetValueType.</span><span style="color:#DCBDFB;">Store</span><span style="color:#ADBAC7;">())</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        client.</span><span style="color:#DCBDFB;">sendTransactionAsync</span><span style="color:#ADBAC7;">(registerAssetTx).</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">getTxTimeout</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">getSeconds</span><span style="color:#ADBAC7;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> VersionedSignedTransaction</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">keyValueTx</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">builder</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">setKeyValue</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">                DEFAULT_ASSET_DEFINITION_ID,</span></span>
<span class="line"><span style="color:#ADBAC7;">                assetKey,</span></span>
<span class="line"><span style="color:#ADBAC7;">                assetValue</span></span>
<span class="line"><span style="color:#ADBAC7;">            ).</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        client.</span><span style="color:#DCBDFB;">sendTransactionAsync</span><span style="color:#ADBAC7;">(keyValueTx).</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">, TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> QueryAndExtractor</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Value</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">assetDefinitionValueQuery</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> QueryBuilder</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">findAssetDefinitionKeyValueByIdAndKey</span><span style="color:#ADBAC7;">(DEFAULT_ASSET_DEFINITION_ID, assetKey)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">account</span><span style="color:#ADBAC7;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#ADBAC7;">            .</span><span style="color:#DCBDFB;">buildSigned</span><span style="color:#ADBAC7;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> CompletableFuture</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">Value</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">future</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> client.</span><span style="color:#DCBDFB;">sendQueryAsync</span><span style="color:#ADBAC7;">(assetDefinitionValueQuery);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">final</span><span style="color:#ADBAC7;"> Value</span><span style="color:#F69D50;"> </span><span style="color:#ADBAC7;">value</span><span style="color:#F69D50;"> </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> future.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#ADBAC7;">        Assertions.</span><span style="color:#DCBDFB;">assertEquals</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">            ((Value.String) value).</span><span style="color:#DCBDFB;">getString</span><span style="color:#ADBAC7;">(),</span></span>
<span class="line"><span style="color:#ADBAC7;">            assetValue.</span><span style="color:#DCBDFB;">getString</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        );</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div>`,46),c=[t];function r(A,i,y,D,B,C){return n(),a("div",null,c)}const d=s(e,[["render",r]]);export{u as __pageData,d as default};
